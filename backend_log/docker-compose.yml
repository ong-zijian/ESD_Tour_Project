version: "3.8"

volumes:
  rabbitmq_data:
  pgdata: 
  kongadata:

networks:
  kong-net:
    driver: bridge

services:
 
  ###################################
  # Booking: The Booking microservice
  ###################################
  booking:
    build:
      context: ./
      dockerfile: booking.Dockerfile
    image: smuozj/booking:esd
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3308/tourdb
      PYTHONUNBUFFERED: 1
    ports:
      - "5001:5001"
    env_file:
      - .env
    
  ###################################
  # Payment: The Payment microservice
  ###################################
  payment:
    build:
      context: ./
      dockerfile: payment.Dockerfile
    image: smuozj/payment:esd
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3308/tourdb
      PYTHONUNBUFFERED: 1
    ports:
      - "5200:5200"
    env_file:
      - .env
 
  ####################################
  # RabbitMQ: The messaging broker   
  ####################################
  
  rabbitmq:
    image: rabbitmq:3-management
    hostname: ESD_tours
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - rabbitmq_data:/var/lib/rabbitmq
   
  #################################################
  # Activity Log: The Activity Log microservice
  #################################################
  activity_log:
    build:
      context: ./
      dockerfile: activity_log.Dockerfile
    image: smuozj/activity_log:esd
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1

  ###################################
  # Error: The Error microservice
  ###################################

  error:
    build:
      context: ./
      dockerfile: error.Dockerfile
    image: smuozj/error:esd
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1

  ###############################################
  # Place booking: The Place Booking microservice
  ###############################################
  place_booking:
    build:
      context: ./
      dockerfile: place_booking.Dockerfile
    image: smuozj/place_booking:esd
    restart: always
    depends_on:
      - booking
      - activity_log
      - error
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      booking_URL: http://booking:5001/booking
      PYTHONUNBUFFERED: 1
    ports:
      - "5101:5100"
    env_file:
      - .env

  ##################################
  # Tour: The Tour microservice
  ##################################
  tour:
    build:
      context: ./
      dockerfile: tour.Dockerfile
    image: smuozj/tour:esd
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3308/tourdb
      PYTHONUNBUFFERED: 1
    ports:
      - "5002:5002"
    env_file:
      - .env
    container_name: tour-service-1
    networks:
      - kong-net
  tour2:
    build:
      context: ./
      dockerfile: tour.Dockerfile
    image: smuozj/tour:esd
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3308/tourdb
      PYTHONUNBUFFERED: 1
    ports:
      - "5003:5002"
    env_file:
      - .env
    container_name: tour-service-2
    networks:
      - kong-net



  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:9.6
    restart: always
    networks:
      - kong-net
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong:2.0.4
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong:2.0.4
    restart: always
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
      - kong-migration
    ports:
      - "8000:8000"

  
  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga
    restart: always
    networks:
        - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: password
      DB_DATABASE: konga_db
    depends_on:
      - kong
    ports:
      - "1337:1337"
    volumes:
      - kongadata:/app/kongadata


#rebuild the containers using docker-compose up --build command.
